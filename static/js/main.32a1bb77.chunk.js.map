{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["myInterval","sessionLength","App","props","state","breakNum","sessionNum","secondNum","secondZero","isSession","disabled","memory","play","cycleShowerSession","cycleShowerBreak","handleClick","bind","countDown","e","this","buttonId","target","id","StopCounter","setState","setInterval","clearInterval","className","onClick","style","color","src","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gJAKIA,E,2EAFAC,G,MAAgB,IA2QLC,E,kDAtQb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,EACVC,WAAY,GACZC,UAAW,EACXC,WAAY,EACZC,WAAW,EACXC,UAAU,EACVC,OAAQ,EACRC,MAAM,EACNC,mBAAoB,EACpBC,iBAAkB,GAEpB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAfA,E,wDAkBPE,GAAI,IAAD,EAWTC,KAAKf,MATPC,EAFW,EAEXA,SACAC,EAHW,EAGXA,WACAC,EAJW,EAIXA,UACAG,EALW,EAKXA,SACAC,EANW,EAMXA,OACAC,EAPW,EAOXA,KACAH,EARW,EAQXA,UACAK,EATW,EASXA,iBACAD,EAVW,EAUXA,mBAEEO,EAAWF,EAAEG,OAAOC,GACxB,QAAQ,GACN,IAAkB,oBAAbF,EACCf,EAAW,IAEbA,GAAY,GAEd,MACF,IAAkB,oBAAbe,EACCf,EAAW,KACbA,GAAY,GAEd,MACF,IAAkB,sBAAbe,EACCd,EAAa,GAAKL,EAAgB,IACpCK,GAAc,EACdL,GAAiB,GAEnB,MACF,IAAkB,sBAAbmB,EACCd,EAAa,KAEfA,GAAc,EACdL,GAAiB,GAEnB,MACF,IAAkB,eAAbmB,EACER,EAGMA,IACTO,KAAKI,cACLX,GAAO,IAJPO,KAAKF,YACLL,GAAO,GAKTF,GAAW,EACXC,EAASL,EACT,MACF,IAAkB,UAAbc,EACHV,GAAW,EACXH,EAAY,EACZD,EAAa,GACbL,EAAgB,GAChBI,EAAW,EACXO,GAAQA,EACRH,GAAY,EACZU,KAAKI,cACLT,EAAmB,EACnBD,EAAqB,EAGzBM,KAAKK,SAAS,CACZnB,WACAC,aACAC,YACAG,WACAC,SACAC,OACAH,YACAK,mBACAD,yB,kCAKS,IAAD,OACVb,EAAayB,aAAY,WAAO,IAAD,EAUzB,EAAKrB,MARPC,EAF2B,EAE3BA,SACAC,EAH2B,EAG3BA,WACAC,EAJ2B,EAI3BA,UACAG,EAL2B,EAK3BA,SACAC,EAN2B,EAM3BA,OACAF,EAP2B,EAO3BA,UACAI,EAR2B,EAQ3BA,mBACAC,EAT2B,EAS3BA,iBAEEP,EAAY,EACdA,GAAwB,EACD,IAAdA,IACTA,EAAY,IAEVD,GAAc,GAAmB,KAAdC,IAErBD,GAA0B,GAGxBG,GAA4B,IAAfH,GAAkC,IAAdC,IAEnCM,GAAsB,EACtBP,EAAaD,EACbI,GAAaA,GAEVA,GAA4B,IAAfH,GAAkC,IAAdC,IAEpCO,GAAoB,EACpBR,EAAaK,EACbF,GAAY,GAEd,EAAKe,SAAS,CACZnB,WACAC,aACAC,YACAG,WACAC,SACAF,YACAI,qBACAC,uBAED,O,oCAIHY,cAAc1B,K,+BAGN,IAAD,EAWHmB,KAAKf,MATPC,EAFK,EAELA,SACAC,EAHK,EAGLA,WACAC,EAJK,EAILA,UACAE,EALK,EAKLA,UACAC,EANK,EAMLA,SACAF,EAPK,EAOLA,WACAK,EARK,EAQLA,mBACAC,EATK,EASLA,iBACAF,EAVK,EAULA,KAEF,OACE,yBAAKU,GAAG,WAEN,6BAASA,GAAG,cACV,wBAAIK,UAAU,SAAd,mBAGF,6BAASA,UAAU,kBAEjB,wBAAIL,GAAG,eAAP,gBACA,yBAAKA,GAAG,iBACN,4BACEZ,SAAUA,EACVkB,QAAST,KAAKJ,YACdO,GAAG,mBAHL,MAOA,wBAAIA,GAAG,gBACJjB,GAAY,GAAKA,GAAY,EAAIG,EAAa,GAC9CH,GAEH,4BACEK,SAAUA,EACVkB,QAAST,KAAKJ,YACdO,GAAG,mBAHL,SAUF,wBAAIA,GAAG,iBAAP,kBACA,yBAAKA,GAAG,mBACN,4BACEZ,SAAUA,EACVkB,QAAST,KAAKJ,YACdO,GAAG,qBAHL,MAOA,wBAAIA,GAAG,kBACJrB,GAAiB,GAAKA,GAAiB,EAAIO,EAAa,GACxDP,GAEH,4BACES,SAAUA,EACVkB,QAAST,KAAKJ,YACdO,GAAG,qBAHL,UAWJ,6BAASA,GAAG,iBACV,wBAAIO,MAAOpB,EAAW,CAACqB,MAAO,WAAW,CAACA,MAAO,WAAYR,GAAG,eAAeb,EAAY,UAAY,SACvG,0BAAMoB,MAAOpB,EAAW,CAACqB,MAAO,WAAW,CAACA,MAAO,WAAaR,GAAG,aAChEhB,GAAc,GAAKA,GAAc,EAAIE,EAAa,GAClDF,EAFH,IAEgBC,GAAa,GAAKA,GAAa,EAAIC,EAAa,GAC7DD,GAEH,uBAAGe,GAAG,wBAAN,YACYT,EADZ,cAC2C,IACxCD,GAAQH,EAAR,UACMI,EAAqB,GAD3B,OAE4B,IAAvBA,EACI,KACuB,IAAvBA,EACA,KACA,MAEN,IAEN,uBAAGS,GAAG,sBAAN,UACUR,EADV,cACuC,IACpCF,IAASH,EAAT,UACMK,EAAmB,GADzB,OAE0B,IAArBA,EACI,KACqB,IAArBA,EACA,KACA,MAEN,IAGN,2BAAOQ,GAAG,OAAOS,IAAI,gBAAeC,KAAK,gBAI3C,6BAASV,GAAG,mBACV,4BAAQM,QAAST,KAAKJ,YAAaO,GAAG,cAAtC,QAGA,4BAAQM,QAAST,KAAKJ,YAAaO,GAAG,SAAtC,e,GA9PQW,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.32a1bb77.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nlet sessionLength = 25; //For Session Length\n\nlet myInterval; //For Interval Clearer\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakNum: 5,\n      sessionNum: 25,\n      secondNum: 0,\n      secondZero: 0,\n      isSession: true,\n      disabled: false,\n      memory: 0,\n      play: false,\n      cycleShowerSession: 0,\n      cycleShowerBreak: 0,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  handleClick(e) {\n    let {\n      breakNum,\n      sessionNum,\n      secondNum,\n      disabled,\n      memory,\n      play,\n      isSession,\n      cycleShowerBreak,\n      cycleShowerSession,\n    } = this.state;\n    let buttonId = e.target.id;\n    switch (true) {\n      case buttonId === \"break-decrement\":\n        if (breakNum > 1) {\n          //break-decreaser\n          breakNum -= 1;\n        }\n        break;\n      case buttonId === \"break-increment\":\n        if (breakNum < 60) {\n          breakNum += 1; //break-increaser\n        }\n        break;\n      case buttonId === \"session-decrement\":\n        if (sessionNum > 0 && sessionLength > 1) {\n          sessionNum -= 1; //Session-decreaser\n          sessionLength -= 1;\n        }\n        break;\n      case buttonId === \"session-increment\":\n        if (sessionNum < 60) {\n          //Session-Increaser\n          sessionNum += 1;\n          sessionLength += 1;\n        }\n        break;\n      case buttonId === \"start_stop\":\n        if (!play) {\n          this.countDown(); //Play/Pause Toogle Btn\n          play = true;\n        } else if (play) {\n          this.StopCounter();\n          play = false;\n        }\n        disabled = true;\n        memory = sessionNum;\n        break;\n      case buttonId === \"reset\":\n        disabled = false;\n        secondNum = 0;\n        sessionNum = 25; //Reset Btn\n        sessionLength = 25;\n        breakNum = 5;\n        play = !play;\n        isSession = true;\n        this.StopCounter();\n        cycleShowerBreak = 0;\n        cycleShowerSession = 0;\n        break;\n    }\n    this.setState({\n      breakNum,\n      sessionNum,\n      secondNum,\n      disabled,\n      memory,\n      play,\n      isSession,\n      cycleShowerBreak,\n      cycleShowerSession,\n    });\n  }\n\n  //CountDown Function for Timer\n  countDown() {\n    myInterval = setInterval(() => {\n      let {\n        breakNum,\n        sessionNum,\n        secondNum,\n        disabled,\n        memory,\n        isSession,\n        cycleShowerSession,\n        cycleShowerBreak,\n      } = this.state;\n      if (secondNum > 0) {\n        secondNum = secondNum - 1; //Second CountDown\n      } else if (secondNum === 0) {\n        secondNum = 59; //Second Cycle\n      }\n      if (sessionNum >= 0 && secondNum === 59) {\n        //Session Minute CountDown\n        sessionNum = sessionNum - 1;\n      }\n\n      if (isSession && sessionNum === 0 && secondNum === 0) {\n        //Break Starter\n        cycleShowerSession += 1;\n        sessionNum = breakNum;\n        isSession = !isSession;\n      }\n      if (!isSession && sessionNum === 0 && secondNum === 0) {\n        //Break Ending & Session Starter\n        cycleShowerBreak += 1;\n        sessionNum = memory;\n        isSession = true;\n      }\n      this.setState({\n        breakNum,\n        sessionNum,\n        secondNum,\n        disabled,\n        memory,\n        isSession,\n        cycleShowerSession,\n        cycleShowerBreak,\n      }); //Setting the final state\n    }, 1000);\n  }\n\n  StopCounter() {\n    clearInterval(myInterval);\n  }\n\n  render() {\n    let {\n      breakNum,\n      sessionNum,\n      secondNum,\n      isSession,\n      disabled,\n      secondZero,\n      cycleShowerSession,\n      cycleShowerBreak,\n      play,\n    } = this.state;\n    return (\n      <div id=\"wrapper\">\n        {/*For All Text & Extra Design*/}\n        <section id=\"ui-wrapper\">\n          <h1 className=\"title\">Pomodoro Clock</h1>\n        </section>\n\n        <section className=\"length-wrapper\">\n          {/* For All Break Section Wrapper */}\n          <h1 id=\"break-label\">Break Length</h1>\n          <div id=\"break-wrapper\">\n            <button\n              disabled={disabled}\n              onClick={this.handleClick}\n              id=\"break-increment\"\n            >\n              Up\n            </button>\n            <h2 id=\"break-length\">\n              {breakNum >= 0 && breakNum <= 9 ? secondZero : \"\"}\n              {breakNum}\n            </h2>\n            <button\n              disabled={disabled}\n              onClick={this.handleClick}\n              id=\"break-decrement\"\n            >\n              Down\n            </button>\n          </div>\n\n          {/* For All Seesion Section Wrapper */}\n          <h1 id=\"session-label\">Session Length</h1>\n          <div id=\"session-wrapper\">\n            <button\n              disabled={disabled}\n              onClick={this.handleClick}\n              id=\"session-increment\"\n            >\n              Up\n            </button>\n            <h2 id=\"session-length\">\n              {sessionLength >= 0 && sessionLength <= 9 ? secondZero : \"\"}\n              {sessionLength}\n            </h2>\n            <button\n              disabled={disabled}\n              onClick={this.handleClick}\n              id=\"session-decrement\"\n            >\n              Down\n            </button>\n          </div>\n        </section>\n\n        {/* For All Timmer Wrapper */}\n        <section id=\"timer-wrapper\">\n          <h1 style={isSession? {color: \"#ff7360\"}:{color: \"#55ff71\"}} id=\"timer-label\">{isSession ? \"Session\" : \"Break\"}</h1>\n          <span style={isSession? {color: \"#ff7360\"}:{color: \"#55ff71\"}}  id=\"time-left\">\n            {sessionNum >= 0 && sessionNum <= 9 ? secondZero : \"\"}\n            {sessionNum}:{secondNum >= 0 && secondNum <= 9 ? secondZero : \"\"}\n            {secondNum}\n          </span>\n          <p id=\"cycle-shower-session\">\n            Session: {cycleShowerSession} | Running:{\" \"}\n            {play && isSession\n              ? `${cycleShowerSession + 1}${\n                  cycleShowerSession === 0\n                    ? \"st\"\n                    : cycleShowerSession === 1\n                    ? \"nd\"\n                    : \"th\"\n                }`\n              : \"\"}\n          </p>\n          <p id=\"cycle-shower-break\">\n            Break: {cycleShowerBreak} | Running:{\" \"}\n            {play && !isSession\n              ? `${cycleShowerBreak + 1}${\n                  cycleShowerBreak === 0\n                    ? \"st\"\n                    : cycleShowerBreak === 1\n                    ? \"nd\"\n                    : \"th\"\n                }`\n              : \"\"}\n          </p>\n          {/* As I increase thesessionNum the minute of the timer should Update*/}\n          <audio id=\"beep\" src=\"src\\beep.mp3\" type=\"audio/mpeg\" />\n        </section>\n\n        {/* For All Control Wrapper */}\n        <section id=\"control-wrapper\">\n          <button onClick={this.handleClick} id=\"start_stop\">\n            Play\n          </button>\n          <button onClick={this.handleClick} id=\"reset\">\n            Reset\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}